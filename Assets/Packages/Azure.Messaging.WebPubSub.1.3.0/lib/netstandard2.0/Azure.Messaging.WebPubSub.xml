<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Messaging.WebPubSub</name>
    </assembly>
    <members>
        <member name="T:Azure.Messaging.WebPubSub.ClientConnectionFilter">
            <summary>
            The ClientConnectionFilter class is used to help construct valid OData filter
            parameter to be used by Send* APIs by automatically replacing, quoting, and escaping interpolated
            parameters.
            For more information, see <see href="https://aka.ms/awps/filter-syntax">Filters in Azure Web PubSub</see>.
            </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.ClientConnectionFilter.Create(System.FormattableString)">
            <summary>
            Create an OData filter expression from an interpolated string.  The
            interpolated values will be quoted and escaped as necessary.
            </summary>
            <param name="filter">An interpolated filter string.</param>
            <returns>A valid OData filter expression.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.ClientConnectionFilter.Create(System.FormattableString,System.IFormatProvider)">
            <summary>
            Create an OData filter expression from an interpolated string.  The
            interpolated values will be quoted and escaped as necessary.
            </summary>
            <param name="filter">An interpolated filter string.</param>
            <param name="formatProvider">
            Format provider used to convert values to strings.
            <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> is used as a default.
            </param>
            <returns>A valid OData filter expression.</returns>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.HealthApiClient">
            <summary> The HealthApi service client. </summary>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.HealthApiClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.HealthApiClient.Pipeline">
            <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.HealthApiClient.#ctor">
            <summary> Initializes a new instance of HealthApiClient for mocking. </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.HealthApiClient.#ctor(System.String)">
            <summary> Initializes a new instance of HealthApiClient. </summary>
            <param name="endpoint"> HTTP or HTTPS endpoint for the Web PubSub service instance. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpoint" /> is null. </exception>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.HealthApiClient.#ctor(System.String,Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions)">
            <summary> Initializes a new instance of HealthApiClient. </summary>
            <param name="endpoint"> HTTP or HTTPS endpoint for the Web PubSub service instance. </param>
            <param name="options"> The options for configuring the client. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="endpoint" /> is null. </exception>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.HealthApiClient.GetServiceStatusAsync(Azure.RequestContext)">
            <summary> Get service health status. </summary>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call GetServiceStatusAsync.
<code><![CDATA[
var client = new HealthApiClient("<https://my-service.azure.com>");

Response response = await client.GetServiceStatusAsync();
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.HealthApiClient.GetServiceStatus(Azure.RequestContext)">
            <summary> Get service health status. </summary>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call GetServiceStatus.
<code><![CDATA[
var client = new HealthApiClient("<https://my-service.azure.com>");

Response response = client.GetServiceStatus();
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient">
            <summary> The WebPubSubService service client. </summary>
            <summary>
            Azure Web PubSub Service Client.
            </summary>
            <summary>
            Azure Web PubSub Service Client.
            </summary>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.WebPubSubServiceClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.WebPubSubServiceClient.Pipeline">
            <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor">
            <summary> Initializes a new instance of WebPubSubServiceClient for mocking. </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseAllConnectionsAsync(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Close the connections in the hub. </summary>
            <param name="excluded"> Exclude these connectionIds when closing the connections in the hub. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseAllConnectionsAsync.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseAllConnectionsAsync();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseAllConnectionsAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseAllConnectionsAsync(new String[]{"<excluded>"}, "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseAllConnections(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Close the connections in the hub. </summary>
            <param name="excluded"> Exclude these connectionIds when closing the connections in the hub. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseAllConnections.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseAllConnections();
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseAllConnections with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseAllConnections(new String[]{"<excluded>"}, "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GenerateClientTokenImplAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)">
            <summary> Generate token for the client to connect Azure Web PubSub service. </summary>
            <param name="userId"> User Id. </param>
            <param name="role"> Roles that the connection with the generated token will have. </param>
            <param name="minutesToExpire"> The expire time of the generated token. </param>
            <param name="group"> Groups that the connection will join when it connects. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
            <example>
This sample shows how to call GenerateClientTokenImplAsync and parse the result.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.GenerateClientTokenImplAsync();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GenerateClientTokenImplAsync with all parameters, and how to parse the result.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.GenerateClientTokenImplAsync("<userId>", new String[]{"<role>"}, 1234, new String[]{"<group>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("token").ToString());
]]></code>
</example><remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ClientTokenResponse</c>:
<code>{
  token: string, # Optional. The token value for the WebSocket client to connect to the service
}
</code>

</remarks>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GenerateClientTokenImpl(System.String,System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)">
            <summary> Generate token for the client to connect Azure Web PubSub service. </summary>
            <param name="userId"> User Id. </param>
            <param name="role"> Roles that the connection with the generated token will have. </param>
            <param name="minutesToExpire"> The expire time of the generated token. </param>
            <param name="group"> Groups that the connection will join when it connects. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
            <example>
This sample shows how to call GenerateClientTokenImpl and parse the result.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.GenerateClientTokenImpl();

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GenerateClientTokenImpl with all parameters, and how to parse the result.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.GenerateClientTokenImpl("<userId>", new String[]{"<role>"}, 1234, new String[]{"<group>"});

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("token").ToString());
]]></code>
</example><remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>ClientTokenResponse</c>:
<code>{
  token: string, # Optional. The token value for the WebSocket client to connect to the service
}
</code>

</remarks>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToAllAsync(Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Broadcast content inside request body to all the connected client connections. </summary>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="filter"> Following OData filter syntax to filter out the subscribers receiving the messages. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToAllAsync with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToAllAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SendToAllAsync with all parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToAllAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream, new String[]{"<excluded>"}, "<filter>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToAll(Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Broadcast content inside request body to all the connected client connections. </summary>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="filter"> Following OData filter syntax to filter out the subscribers receiving the messages. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToAll with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToAll(RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SendToAll with all parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToAll(RequestContent.Create(data), ContentType.ApplicationOctetStream, new String[]{"<excluded>"}, "<filter>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseConnectionAsync(System.String,System.String,Azure.RequestContext)">
            <summary> Close the client connection. </summary>
            <param name="connectionId"> Target connection Id. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseConnectionAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseConnectionAsync("<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseConnectionAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseConnectionAsync("<connectionId>", "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseConnection(System.String,System.String,Azure.RequestContext)">
            <summary> Close the client connection. </summary>
            <param name="connectionId"> Target connection Id. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseConnection with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseConnection("<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseConnection with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseConnection("<connectionId>", "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.ConnectionExistsImplAsync(System.String,Azure.RequestContext)">
            <summary> Check if the connection with the given connectionId exists. </summary>
            <param name="connectionId"> The connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call ConnectionExistsImplAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.ConnectionExistsImplAsync("<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.ConnectionExistsImpl(System.String,Azure.RequestContext)">
            <summary> Check if the connection with the given connectionId exists. </summary>
            <param name="connectionId"> The connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call ConnectionExistsImpl with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.ConnectionExistsImpl("<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToConnectionAsync(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,Azure.RequestContext)">
            <summary> Send content inside request body to the specific connection. </summary>
            <param name="connectionId"> The connection Id. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToConnectionAsync with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToConnectionAsync("<connectionId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToConnection(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,Azure.RequestContext)">
            <summary> Send content inside request body to the specific connection. </summary>
            <param name="connectionId"> The connection Id. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToConnection with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToConnection("<connectionId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveConnectionFromAllGroupsAsync(System.String,Azure.RequestContext)">
            <summary> Remove a connection from all groups. </summary>
            <param name="connectionId"> Target connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RemoveConnectionFromAllGroupsAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.RemoveConnectionFromAllGroupsAsync("<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveConnectionFromAllGroups(System.String,Azure.RequestContext)">
            <summary> Remove a connection from all groups. </summary>
            <param name="connectionId"> Target connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RemoveConnectionFromAllGroups with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.RemoveConnectionFromAllGroups("<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GroupExistsImplAsync(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections inside the given group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call GroupExistsImplAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.GroupExistsImplAsync("<group>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GroupExistsImpl(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections inside the given group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call GroupExistsImpl with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.GroupExistsImpl("<group>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseGroupConnectionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Close connections in the specific group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="excluded"> Exclude these connectionIds when closing the connections in the group. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseGroupConnectionsAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseGroupConnectionsAsync("<group>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseGroupConnectionsAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseGroupConnectionsAsync("<group>", new String[]{"<excluded>"}, "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseGroupConnections(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Close connections in the specific group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="excluded"> Exclude these connectionIds when closing the connections in the group. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseGroupConnections with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseGroupConnections("<group>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseGroupConnections with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseGroupConnections("<group>", new String[]{"<excluded>"}, "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToGroupAsync(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Send content inside request body to a group of connections. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="filter"> Following OData filter syntax to filter out the subscribers receiving the messages. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToGroupAsync with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToGroupAsync("<group>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SendToGroupAsync with all parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToGroupAsync("<group>", RequestContent.Create(data), ContentType.ApplicationOctetStream, new String[]{"<excluded>"}, "<filter>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToGroup(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Send content inside request body to a group of connections. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="filter"> Following OData filter syntax to filter out the subscribers receiving the messages. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToGroup with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToGroup("<group>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SendToGroup with all parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToGroup("<group>", RequestContent.Create(data), ContentType.ApplicationOctetStream, new String[]{"<excluded>"}, "<filter>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveConnectionFromGroupAsync(System.String,System.String,Azure.RequestContext)">
            <summary> Remove a connection from the target group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RemoveConnectionFromGroupAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.RemoveConnectionFromGroupAsync("<group>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveConnectionFromGroup(System.String,System.String,Azure.RequestContext)">
            <summary> Remove a connection from the target group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RemoveConnectionFromGroup with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.RemoveConnectionFromGroup("<group>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.AddConnectionToGroupAsync(System.String,System.String,Azure.RequestContext)">
            <summary> Add a connection to the target group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call AddConnectionToGroupAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.AddConnectionToGroupAsync("<group>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.AddConnectionToGroup(System.String,System.String,Azure.RequestContext)">
            <summary> Add a connection to the target group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call AddConnectionToGroup with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.AddConnectionToGroup("<group>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RevokePermissionAsync(System.String,System.String,System.String,Azure.RequestContext)">
            <summary> Revoke permission for the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. Allowed values: "sendToGroup" | "joinLeaveGroup". </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="permission" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="permission" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RevokePermissionAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.RevokePermissionAsync("<permission>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RevokePermissionAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.RevokePermissionAsync("<permission>", "<connectionId>", "<targetName>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RevokePermission(System.String,System.String,System.String,Azure.RequestContext)">
            <summary> Revoke permission for the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. Allowed values: "sendToGroup" | "joinLeaveGroup". </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="permission" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="permission" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RevokePermission with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.RevokePermission("<permission>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call RevokePermission with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.RevokePermission("<permission>", "<connectionId>", "<targetName>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CheckPermissionAsync(System.String,System.String,System.String,Azure.RequestContext)">
            <summary> Check if a connection has permission to the specified action. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. Allowed values: "sendToGroup" | "joinLeaveGroup". </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="permission" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="permission" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CheckPermissionAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CheckPermissionAsync("<permission>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CheckPermissionAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CheckPermissionAsync("<permission>", "<connectionId>", "<targetName>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CheckPermission(System.String,System.String,System.String,Azure.RequestContext)">
            <summary> Check if a connection has permission to the specified action. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. Allowed values: "sendToGroup" | "joinLeaveGroup". </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="permission" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="permission" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CheckPermission with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CheckPermission("<permission>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CheckPermission with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CheckPermission("<permission>", "<connectionId>", "<targetName>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GrantPermissionAsync(System.String,System.String,System.String,Azure.RequestContext)">
            <summary> Grant permission to the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. Allowed values: "sendToGroup" | "joinLeaveGroup". </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="permission" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="permission" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call GrantPermissionAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.GrantPermissionAsync("<permission>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call GrantPermissionAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.GrantPermissionAsync("<permission>", "<connectionId>", "<targetName>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GrantPermission(System.String,System.String,System.String,Azure.RequestContext)">
            <summary> Grant permission to the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. Allowed values: "sendToGroup" | "joinLeaveGroup". </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="permission" /> or <paramref name="connectionId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="permission" /> or <paramref name="connectionId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call GrantPermission with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.GrantPermission("<permission>", "<connectionId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call GrantPermission with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.GrantPermission("<permission>", "<connectionId>", "<targetName>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.UserExistsImplAsync(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections connected for the given user. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call UserExistsImplAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.UserExistsImplAsync("<userId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.UserExistsImpl(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections connected for the given user. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call UserExistsImpl with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.UserExistsImpl("<userId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseUserConnectionsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Close connections for the specific user. </summary>
            <param name="userId"> The user Id. </param>
            <param name="excluded"> Exclude these connectionIds when closing the connections for the user. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseUserConnectionsAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseUserConnectionsAsync("<userId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseUserConnectionsAsync with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.CloseUserConnectionsAsync("<userId>", new String[]{"<excluded>"}, "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CloseUserConnections(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)">
            <summary> Close connections for the specific user. </summary>
            <param name="userId"> The user Id. </param>
            <param name="excluded"> Exclude these connectionIds when closing the connections for the user. </param>
            <param name="reason"> The reason closing the client connection. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call CloseUserConnections with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseUserConnections("<userId>");
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseUserConnections with all parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.CloseUserConnections("<userId>", new String[]{"<excluded>"}, "<reason>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToUserAsync(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,System.String,Azure.RequestContext)">
            <summary> Send content inside request body to the specific user. </summary>
            <param name="userId"> The user Id. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="filter"> Following OData filter syntax to filter out the subscribers receiving the messages. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToUserAsync with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToUserAsync("<userId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SendToUserAsync with all parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = await client.SendToUserAsync("<userId>", RequestContent.Create(data), ContentType.ApplicationOctetStream, "<filter>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToUser(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,System.String,Azure.RequestContext)">
            <summary> Send content inside request body to the specific user. </summary>
            <param name="userId"> The user Id. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="filter"> Following OData filter syntax to filter out the subscribers receiving the messages. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call SendToUser with required parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToUser("<userId>", RequestContent.Create(data), ContentType.ApplicationOctetStream);
Console.WriteLine(response.Status);
]]></code>
This sample shows how to call SendToUser with all parameters and request content.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

var data = File.OpenRead("<filePath>");

Response response = client.SendToUser("<userId>", RequestContent.Create(data), ContentType.ApplicationOctetStream, "<filter>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveUserFromAllGroupsAsync(System.String,Azure.RequestContext)">
            <summary> Remove a user from all groups. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RemoveUserFromAllGroupsAsync with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = await client.RemoveUserFromAllGroupsAsync("<userId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveUserFromAllGroups(System.String,Azure.RequestContext)">
            <summary> Remove a user from all groups. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
            <example>
This sample shows how to call RemoveUserFromAllGroups with required parameters.
<code><![CDATA[
var client = new WebPubSubServiceClient("<https://my-service.azure.com>", "<hub>");

Response response = client.RemoveUserFromAllGroups("<userId>");
Console.WriteLine(response.Status);
]]></code>
</example>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToAllAsync(Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)">
            <summary> Broadcast content inside request body to all the connected client connections. </summary>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToAll(Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)">
            <summary> Broadcast content inside request body to all the connected client connections. </summary>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="content" /> is null. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToGroupAsync(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)">
            <summary> Send content inside request body to a group of connections. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToGroup(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)">
            <summary> Send content inside request body to a group of connections. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="excluded"> Excluded connection Ids. </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="group" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="group" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToUserAsync(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,Azure.RequestContext)">
            <summary> Send content inside request body to the specific user. </summary>
            <param name="userId"> The user Id. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToUser(System.String,Azure.Core.RequestContent,Azure.Core.ContentType,Azure.RequestContext)">
            <summary> Send content inside request body to the specific user. </summary>
            <param name="userId"> The user Id. </param>
            <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
            <param name="contentType"> Upload file type. Allowed values: "application/json" | "application/octet-stream" | "text/plain". </param>
            <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="content" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="userId" /> is an empty string, and was expected to be non-empty. </exception>
            <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
            <returns> The response returned from the service. </returns>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.WebPubSubServiceClient.Hub">
            <summary>
            The hub.
            </summary>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.WebPubSubServiceClient.Endpoint">
            <summary>
            The service endpoint.
            </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor(System.Uri,System.String,Azure.AzureKeyCredential)">
            <summary> Initializes a new instance of WebPubSubServiceClient. </summary>
            <param name="endpoint"> server parameter. </param>
            <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
            <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor(System.Uri,System.String,Azure.AzureKeyCredential,Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions)">
            <summary> Initializes a new instance of WebPubSubServiceClient. </summary>
            <param name="endpoint"> server parameter. </param>
            <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
            <param name="credential"> A credential used to authenticate to an Azure Service. </param>
            <param name="options"> The options for configuring the client. </param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential)">
            <summary> Initializes a new instance of WebPubSubServiceClient. </summary>
            <param name="endpoint"> server parameter. </param>
            <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
            <param name="credential"> A token credential used to authenticate to an Azure Service. </param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor(System.Uri,System.String,Azure.Core.TokenCredential,Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions)">
            <summary> Initializes a new instance of WebPubSubServiceClient. </summary>
            <param name="endpoint"> server parameter. </param>
            <param name="hub"> Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore. </param>
            <param name="credential"> A token credential used to authenticate to an Azure Service. </param>
            <param name="options"> The options for configuring the client. </param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" />.
            </summary>
            <param name="connectionString">Connection string contains Endpoint and AccessKey.</param>
            <param name="hub">Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.#ctor(System.String,System.String,Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" />.
            </summary>
            <param name="connectionString">Connection string contains Endpoint and AccessKey.</param>
            <param name="hub">Target hub name, which should start with alphabetic characters and only contain alpha-numeric characters or underscore.</param>
            <param name="options"></param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToAllAsync(System.String,Azure.Core.ContentType)">
            <summary>Broadcast message to all the connected client connections.</summary>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToAll(System.String,Azure.Core.ContentType)">
            <summary>Broadcast message to all the connected client connections.</summary>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToUserAsync(System.String,System.String,Azure.Core.ContentType)">
            <summary>
            Send message to the specific user.
            </summary>
            <param name="userId">The user Id.</param>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToUser(System.String,System.String,Azure.Core.ContentType)">
            <summary>
            Send message to the specific user.
            </summary>
            <param name="userId">The user Id.</param>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToConnectionAsync(System.String,System.String,Azure.Core.ContentType)">
            <summary>
            Send message to the specific connection.
            </summary>
            <param name="connectionId">The connection Id.</param>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToConnection(System.String,System.String,Azure.Core.ContentType)">
            <summary>
            Send message to the specific connection.
            </summary>
            <param name="connectionId">The connection Id.</param>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToGroupAsync(System.String,System.String,Azure.Core.ContentType)">
            <summary>
            Send message to a group of connections.
            </summary>
            <param name="group">Target group name, which length should be greater than 0 and less than 1025.</param>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.SendToGroup(System.String,System.String,Azure.Core.ContentType)">
            <summary>
            Send message to a group of connections.
            </summary>
            <param name="group">Target group name, which length should be greater than 0 and less than 1025.</param>
            <param name="content"></param>
            <param name="contentType">Defaults to ContentType.PlainText.</param>
            <returns>A <see cref="T:Azure.Response" /> if successful.</returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GroupExistsAsync(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections inside the given group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GroupExists(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections inside the given group. </summary>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.UserExistsAsync(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections connected for the given user. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.UserExists(System.String,Azure.RequestContext)">
            <summary> Check if there are any client connections connected for the given user. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.ConnectionExistsAsync(System.String,Azure.RequestContext)">
            <summary> Check if the connection with the given connectionId exists. </summary>
            <param name="connectionId"> The connection Id. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.ConnectionExists(System.String,Azure.RequestContext)">
            <summary> Check if the connection with the given connectionId exists. </summary>
            <param name="connectionId"> The connection Id. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GrantPermissionAsync(Azure.Messaging.WebPubSub.WebPubSubPermission,System.String,System.String,Azure.RequestContext)">
            <summary> Grant permission to the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GrantPermission(Azure.Messaging.WebPubSub.WebPubSubPermission,System.String,System.String,Azure.RequestContext)">
            <summary> Grant permission to the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, grant the permission to all the targets. If set, grant the permission to the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RevokePermissionAsync(Azure.Messaging.WebPubSub.WebPubSubPermission,System.String,System.String,Azure.RequestContext)">
            <summary> Revoke permission for the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RevokePermission(Azure.Messaging.WebPubSub.WebPubSubPermission,System.String,System.String,Azure.RequestContext)">
            <summary> Revoke permission for the connection. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, revoke the permission for all targets. If set, revoke the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CheckPermissionAsync(Azure.Messaging.WebPubSub.WebPubSubPermission,System.String,System.String,Azure.RequestContext)">
            <summary> Check if a connection has permission to the specified action. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.CheckPermission(Azure.Messaging.WebPubSub.WebPubSubPermission,System.String,System.String,Azure.RequestContext)">
            <summary> Check if a connection has permission to the specified action. </summary>
            <param name="permission"> The permission: current supported actions are joinLeaveGroup and sendToGroup. </param>
            <param name="connectionId"> Target connection Id. </param>
            <param name="targetName"> Optional. If not set, get the permission for all targets. If set, get the permission for the specific target. The meaning of the target depends on the specific permission. </param>
            <param name="context">Options specifying the cancellation token, controlling error reporting, etc.</param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.AddUserToGroupAsync(System.String,System.String,Azure.RequestContext)">
            <summary> Add a user to the target group. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="group" /> is null. </exception>
            <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              code: string,
              message: string,
              target: string,
              details: [ErrorDetail],
              inner: {
                code: string,
                inner: InnerError
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.AddUserToGroup(System.String,System.String,Azure.RequestContext)">
            <summary> Add a user to the target group. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="group" /> is null. </exception>
            <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              code: string,
              message: string,
              target: string,
              details: [ErrorDetail],
              inner: {
                code: string,
                inner: InnerError
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveUserFromGroupAsync(System.String,System.String,Azure.RequestContext)">
            <summary> Remove a user from the target group. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="group" /> is null. </exception>
            <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              code: string,
              message: string,
              target: string,
              details: [ErrorDetail],
              inner: {
                code: string,
                inner: InnerError
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.RemoveUserFromGroup(System.String,System.String,Azure.RequestContext)">
            <summary> Remove a user from the target group. </summary>
            <param name="userId"> Target user Id. </param>
            <param name="group"> Target group name, which length should be greater than 0 and less than 1025. </param>
            <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="userId" /> or <paramref name="group" /> is null. </exception>
            <remarks>
            Schema for <c>Response Error</c>:
            <code>{
              code: string,
              message: string,
              target: string,
              details: [ErrorDetail],
              inner: {
                code: string,
                inner: InnerError
              }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUri(System.DateTimeOffset,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAt">UTC time when the token expires.</param>
            <param name="userId">User Id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUri(System.DateTimeOffset,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAt">UTC time when the token expires.</param>
            <param name="userId">User Id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <param name="groups">Groups that the connection with the generated token will join when it connects.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUriAsync(System.DateTimeOffset,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAt">UTC time when the token expires.</param>
            <param name="userId">User Id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUriAsync(System.DateTimeOffset,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAt">UTC time when the token expires.</param>
            <param name="userId">User Id.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <param name="groups">Groups that the connection with the generated token will join when it connects.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUri(System.TimeSpan,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAfter">Defaults to one hour, if not specified. Must be greater or equal zero.</param>
            <param name="userId">User Id.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUri(System.TimeSpan,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAfter">Defaults to one hour, if not specified. Must be greater or equal zero.</param>
            <param name="userId">User Id.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <param name="groups">Groups that the connection with the generated token will join when it connects.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUriAsync(System.TimeSpan,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAfter">Defaults to one hour, if not specified. Must be greater or equal zero.</param>
            <param name="userId">User Id.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.GetClientAccessUriAsync(System.TimeSpan,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Creates a URI with authentication token.
            </summary>
            <param name="expiresAfter">Defaults to one hour, if not specified. Must be greater or equal zero.</param>
            <param name="userId">User Id.</param>
            <param name="roles">Roles that the connection with the generated token will have.</param>
            <param name="groups">Groups that the connection with the generated token will join when it connects.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClient.ParseConnectionString(System.String)">
            <summary>
            Parse connection string to endpoint and credential.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.Models.ContentType">
            <summary> Content type for upload. </summary>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.WebPubSubPermission">
            <summary>
            Web PubSub permissions.
            </summary>
        </member>
        <member name="F:Azure.Messaging.WebPubSub.WebPubSubPermission.SendToGroup">
            <summary>
            Permission to send messages to a group.
            </summary>
        </member>
        <member name="F:Azure.Messaging.WebPubSub.WebPubSubPermission.JoinLeaveGroup">
            <summary>
            Permission to join and leave a group.
            </summary>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.ReverseProxyPolicy">
            <summary>
            The reverse proxy policy.
            </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.ReverseProxyPolicy.OnSendingRequest(Azure.Core.HttpMessage)">
            <summary>
            Method is invoked before the request is sent.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> containing the request.</param>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.WebPubSubAuthenticationPolicy">
            <summary>
            Web PubSub Authentication Policy.
            </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubAuthenticationPolicy.#ctor(Azure.AzureKeyCredential)">
            <summary>
            Creates an instance of the authentication policy
            </summary>
            <param name="credential"></param>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubAuthenticationPolicy.OnSendingRequest(Azure.Core.HttpMessage)">
            <summary>
            Method is invoked before the request is sent.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> containing the request.</param>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions">
            <summary> Provides the client configuration options for connecting to Azure WebPubSub service. </summary>
            <summary> Client options for WebPubSubServiceClient. </summary>
        </member>
        <member name="F:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.CredentialScopeName">
            <summary>
            The name of the scope to authenticate for when creating a <see cref="T:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy" />
            </summary>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion">
            <summary>
            The versions of Azure WebPubSub supported by this client library.
            </summary>
        </member>
        <member name="F:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion.V2021_10_01">
            <summary> The 2021_10_01_stable version of the Azure WebPubSub service. </summary>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.Version">
            <summary>
            Gets the version of the service API used when making requests.
            </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.#ctor(Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion)">
            <summary> Initializes a new instance of the <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions" />. </summary>
            <param name="version">
            An optional <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion" /> to specify the version of the REST API to use.
            If not provided, the <paramref name="version" /> will default to the latest supported by this client library.
            It is recommended that application authors allow the version to float to the latest and
            library authors pin to a specific version.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="version" /> is not supported by this client library.
            </exception>
        </member>
        <member name="P:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ReverseProxyEndpoint">
            <summary>
            Reverse proxy.
            </summary>
        </member>
        <member name="T:Azure.Messaging.WebPubSub.WebPubSubExtensions">
            <summary>
            WebPubSub extension methods.
            </summary>
        </member>
        <member name="M:Azure.Messaging.WebPubSub.WebPubSubExtensions.ToVersionString(Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion)">
            <summary>
            Gets a version string, like "2021-05-01-preview", corresponding to a given <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion" /> value.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClientOptions.ServiceVersion" /> value to convert into a version string.
            </param>
            <returns> The version string. </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the <paramref name="version" /> is not supported by this client library.
            </exception>
        </member>
        <member name="T:Azure.Core.JwtBuilder">
            <summary>
            Low level library for building JWT
            </summary>
        </member>
        <member name="M:Azure.Core.JwtBuilder.End">
            <summary>
            Returns number of ASCII characters of the JTW. The actual token can be retrieved using Build or WriteTo
            </summary>
            <returns></returns>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="M:Azure.Core.LowLevelPageableHelpers.BuildPageForResponse(Azure.Response,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Azure.Page`1" /> for a given response.
            </summary>
            <param name="response"></param>
            <param name="itemPropertyName"></param>
            <param name="nextLinkPropertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.ProtocolOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.ProtocolOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Core.AsyncLockWithValue`1">
            <summary>
            Primitive that combines async lock and value cache
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.GetLockOrValueAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Method that either returns cached value or acquire a lock.
            If one caller has acquired a lock, other callers will be waiting for the lock to be released.
            If value is set, lock is released and all waiters get that value.
            If value isn't set, the next waiter in the queue will get the lock.
            </summary>
            <param name="async"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.HasValue">
            <summary>
            Returns true if lock contains the cached value. Otherwise false.
            </summary>
        </member>
        <member name="P:Azure.Core.AsyncLockWithValue`1.LockOrValue.Value">
            <summary>
            Returns cached value if it was set when lock has been created. Throws exception otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException">Value isn't set.</exception>
        </member>
        <member name="M:Azure.Core.AsyncLockWithValue`1.LockOrValue.SetValue(`0)">
            <summary>
            Set value to the cache and to all the waiters.
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException">Value is set already.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.Succeeded(Azure.Response)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Succeeded(Azure.Response,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final successful state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="value">The final result of the long-running operation.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.Failed(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class in a final failed state.
            </summary>
            <param name="rawResponse">The final value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />.</param>
            <param name="operationFailedException">The exception that will be thrown by <c>UpdateStatusAsync</c>.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(Azure.Core.ClientOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="options">The customer provided client options object.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients; use default (null)
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.#ctor(System.String,System.String,Azure.Core.DiagnosticsOptions,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> class.
            </summary>
            <param name="optionsNamespace">Namespace of the client class, such as Azure.Storage or Azure.AppConfiguration.</param>
            <param name="providerNamespace">Azure Resource Provider namespace of the Azure service SDK is primarily used for.</param>
            <param name="diagnosticsOptions">The customer provided client diagnostics options.</param>
            <param name="suppressNestedClientActivities">Flag controlling if <see cref="T:System.Diagnostics.Activity" />
             created by this <see cref="T:Azure.Core.Pipeline.ClientDiagnostics" /> for client method calls should be suppressed when called
             by other Azure SDK client methods.  It's recommended to set it to true for new clients, use default (null) for old clients
             for backward compatibility reasons, or set it to false to explicitly disable suppression for specific cases.
             The default value could change in the future, the flag should be only set to false if suppression for the client
             should never be enabled.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.AddLink(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds a link to the scope. This must be called before <see cref="M:Azure.Core.Pipeline.DiagnosticScope.Start" /> has been called for the DiagnosticScope.
            </summary>
            <param name="traceparent">The traceparent for the link.</param>
            <param name="tracestate">The tracestate for the link.</param>
            <param name="attributes">Optional attributes to associate with the link.</param>
        </member>
        <member name="M:Azure.Core.Pipeline.DiagnosticScope.SetTraceparent(System.String)">
            <summary>
            Sets the trace parent for the current scope.
            </summary>
            <param name="traceparent">The trace parent to set for the current scope.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.AssertEnumDefined(System.Type,System.Object,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not defined for <paramref name="enumType" />.
            </summary>
            <param name="enumType">The type to validate against.</param>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not defined for <paramref name="enumType" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="T:Microsoft.Extensions.Azure.WebPubSubServiceClientBuilderExtensions">
            <summary>
            Extension methods to add <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" /> client to clients builder.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.WebPubSubServiceClientBuilderExtensions.AddWebPubSubServiceClient``1(``0,System.String,System.String)">
            <summary>
            Registers a <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" /> instance with the provided <paramref name="connectionString" /> and <paramref name="hub" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.WebPubSubServiceClientBuilderExtensions.AddWebPubSubServiceClient``1(``0,System.Uri,System.String,Azure.AzureKeyCredential)">
            <summary>
            Registers a <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" /> instance with the provided <paramref name="endpoint" />, and <paramref name="hub" /> and <paramref name="credential" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.WebPubSubServiceClientBuilderExtensions.AddWebPubSubServiceClient``1(``0,System.Uri,System.String,Azure.Core.TokenCredential)">
            <summary>
            Registers a <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" /> instance with the provided <paramref name="endpoint" />, and <paramref name="hub" /> and <paramref name="credential" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Azure.WebPubSubServiceClientBuilderExtensions.AddWebPubSubServiceClient``2(``0,``1)">
            <summary>
            Registers a <see cref="T:Azure.Messaging.WebPubSub.WebPubSubServiceClient" /> instance with connection options loaded from the provided <paramref name="configuration" /> instance.
            </summary>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
